
CashRegister
  ::new
    sets an instance variable @total on initialization to zero (FAILED - 1)
    optionally takes an employee discount on initialization
  #total
    returns the current total (FAILED - 2)
  #add_item
    accepts a title and a price and increases the total (FAILED - 3)
    also accepts an optional quantity (FAILED - 4)
    doesn't forget about the previous total (FAILED - 5)
  #apply_discount
    the cash register was initialized with an employee discount
      applies the discount to the total price (FAILED - 6)
      returns success message with updated total (FAILED - 7)
      reduces the total (FAILED - 8)
    the cash register was not initialized with an employee discount
      returns a string error message that there is no discount to apply (FAILED - 9)
  #items
    returns an array containing all items that have been added (FAILED - 10)
  #void_last_transaction
    subtracts the last transaction from the total (FAILED - 11)

Failures:

  1) CashRegister ::new sets an instance variable @total on initialization to zero
     Failure/Error:
       def initialize(discount)
           @total = 0
           @discount = discount
       end

     ArgumentError:
       wrong number of arguments (given 0, expected 1)
     # ./lib/cash_register.rb:4:in `initialize'
     # ./spec/cash_register_spec.rb:2:in `new'
     # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:7:in `block (3 levels) in <top (required)>'

  2) CashRegister #total returns the current total
     Failure/Error:
       def initialize(discount)
           @total = 0
           @discount = discount
       end

     ArgumentError:
       wrong number of arguments (given 0, expected 1)
     # ./lib/cash_register.rb:4:in `initialize'
     # ./spec/cash_register_spec.rb:2:in `new'
     # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) CashRegister #add_item accepts a title and a price and increases the total
     Failure/Error:
       def initialize(discount)
           @total = 0
           @discount = discount
       end

     ArgumentError:
       wrong number of arguments (given 0, expected 1)
     # ./lib/cash_register.rb:4:in `initialize'
     # ./spec/cash_register_spec.rb:2:in `new'
     # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:24:in `block (4 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:24:in `block (3 levels) in <top (required)>'

  4) CashRegister #add_item also accepts an optional quantity
     Failure/Error:
       def initialize(discount)
           @total = 0
           @discount = discount
       end

     ArgumentError:
       wrong number of arguments (given 0, expected 1)
     # ./lib/cash_register.rb:4:in `initialize'
     # ./spec/cash_register_spec.rb:2:in `new'
     # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:28:in `block (4 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:28:in `block (3 levels) in <top (required)>'

  5) CashRegister #add_item doesn't forget about the previous total
     Failure/Error:
       def initialize(discount)
           @total = 0
           @discount = discount
       end

     ArgumentError:
       wrong number of arguments (given 0, expected 1)
     # ./lib/cash_register.rb:4:in `initialize'
     # ./spec/cash_register_spec.rb:2:in `new'
     # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:32:in `block (3 levels) in <top (required)>'

  6) CashRegister #apply_discount the cash register was initialized with an employee discount applies the discount to the total price
     Failure/Error: cash_register_with_discount.add_item("macbook air", 1000)

     NoMethodError:
       undefined method `add_item' for #<CashRegister:0x000000025edbc8 @total=0, @discount=20>
     # ./spec/cash_register_spec.rb:44:in `block (4 levels) in <top (required)>'

  7) CashRegister #apply_discount the cash register was initialized with an employee discount returns success message with updated total
     Failure/Error: cash_register_with_discount.add_item("macbook air", 1000)

     NoMethodError:
       undefined method `add_item' for #<CashRegister:0x000000025ec138 @total=0, @discount=20>
     # ./spec/cash_register_spec.rb:50:in `block (4 levels) in <top (required)>'

  8) CashRegister #apply_discount the cash register was initialized with an employee discount reduces the total
     Failure/Error:
       def initialize(discount)
           @total = 0
           @discount = discount
       end

     ArgumentError:
       wrong number of arguments (given 0, expected 1)
     # ./lib/cash_register.rb:4:in `initialize'
     # ./spec/cash_register_spec.rb:2:in `new'
     # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:55:in `block (4 levels) in <top (required)>'

  9) CashRegister #apply_discount the cash register was not initialized with an employee discount returns a string error message that there is no discount to apply
     Failure/Error:
       def initialize(discount)
           @total = 0
           @discount = discount
       end

     ArgumentError:
       wrong number of arguments (given 0, expected 1)
     # ./lib/cash_register.rb:4:in `initialize'
     # ./spec/cash_register_spec.rb:2:in `new'
     # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
     # ./spec/cash_register_spec.rb:63:in `block (4 levels) in <top (required)>'

  10) CashRegister #items returns an array containing all items that have been added
      Failure/Error:
        def initialize(discount)
            @total = 0
            @discount = discount
        end

      ArgumentError:
        wrong number of arguments (given 0, expected 1)
      # ./lib/cash_register.rb:4:in `initialize'
      # ./spec/cash_register_spec.rb:70:in `new'
      # ./spec/cash_register_spec.rb:70:in `block (3 levels) in <top (required)>'

  11) CashRegister #void_last_transaction subtracts the last transaction from the total
      Failure/Error:
        def initialize(discount)
            @total = 0
            @discount = discount
        end

      ArgumentError:
        wrong number of arguments (given 0, expected 1)
      # ./lib/cash_register.rb:4:in `initialize'
      # ./spec/cash_register_spec.rb:2:in `new'
      # ./spec/cash_register_spec.rb:2:in `block (2 levels) in <top (required)>'
      # ./spec/cash_register_spec.rb:79:in `block (3 levels) in <top (required)>'

Finished in 0.0098 seconds (files took 0.17765 seconds to load)
12 examples, 11 failures

Failed examples:

rspec ./spec/cash_register_spec.rb:6 # CashRegister ::new sets an instance variable @total on initialization to zero
rspec ./spec/cash_register_spec.rb:16 # CashRegister #total returns the current total
rspec ./spec/cash_register_spec.rb:23 # CashRegister #add_item accepts a title and a price and increases the total
rspec ./spec/cash_register_spec.rb:27 # CashRegister #add_item also accepts an optional quantity
rspec ./spec/cash_register_spec.rb:31 # CashRegister #add_item doesn't forget about the previous total
rspec ./spec/cash_register_spec.rb:43 # CashRegister #apply_discount the cash register was initialized with an employee discount applies the discount to the total price
rspec ./spec/cash_register_spec.rb:49 # CashRegister #apply_discount the cash register was initialized with an employee discount returns success message with updated total
rspec ./spec/cash_register_spec.rb:54 # CashRegister #apply_discount the cash register was initialized with an employee discount reduces the total
rspec ./spec/cash_register_spec.rb:62 # CashRegister #apply_discount the cash register was not initialized with an employee discount returns a string error message that there is no discount to apply
rspec ./spec/cash_register_spec.rb:69 # CashRegister #items returns an array containing all items that have been added
rspec ./spec/cash_register_spec.rb:78 # CashRegister #void_last_transaction subtracts the last transaction from the total

